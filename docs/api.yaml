openapi: 3.0.0
info:
  title: POS-PointofSales
  description: This is API for Project By Alterra Academy
  version: 1.0.0
  contact:
    email: adiyudapranata@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/123ADIYUDA/POS-PointofSales/1.0.0
  # Main Url
  - description: Main URL
    url: URL will be update soon

paths:
####################################
#  AUTH
####################################
  /auth/register:
    post:
      tags:
        - Auth
      summary: register
      description: Feature admin for register a new user
      security:
        - JWTAuth: []

      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "yuda"
                email: 
                  type: string
                  example: "yuda@mail.com"
                phone_number: 
                  type: string
                  example: "08123456"
                pictures: 
                  type: string
                  format: binary
                  example: "foto.jpg"
      responses:
        '201':
          description: Register success.
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    {
                      id: 2,
                      name: "yuda",
                      email: "yuda@mail.com",
                      phone_number: "08123456",
                      pictures: "foto.jpg"
                    }
                  code: 201
                  message: "Register success"
        '401' :
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Login akun 

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                email: "yuda@mail.com"
                password: "qwerty123"
      responses:
        '200':
          description: Login success.
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                  code: 200
                  message: "Login success"
        '401' :
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change Password
      description: Change Password
      security:
        - JWTAuth: []

      requestBody:
        description: Change Password
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
                - confirm_password
              properties:
                old_password:
                  type: string
                  description: old password
                new_password:
                  type: string
                  description: new password 
                confirm_password:
                  type: string
                  description: confirm password 
      responses:
        '200':
          description: Change Password success.
          content:
            application/json:
              schema:
                type: object
                example:
                  code: 200
                  message: "Change password success"
        '400':
          $ref: '#/components/responses/400'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'

####################################
#  USERS
####################################
  /users:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Feature user for show detail user
      security:
        - JWTAuth: []

      responses:
        '200':
          description: get users login
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    {
                      id: 2,
                      name: "yuda",
                      email: "yuda@mail.com",
                      phone_number: "08123456",
                      pictures : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/2/foto.jpg",
                    }
                  code: 200
                  message: "Success show profile"

        '500':
          $ref: '#/components/responses/500'
  
  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the users
        schema:
          type: integer
    put:
      tags:
        - Users
      summary: Update user data
      description: Feature user for update user data
      security:
        - JWTAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  name: "yuda",
                  email: "yuda@mail.com",
                  phone_number: "08123456",
                  pictures : "foto.jpg",
                }
      responses:
        '200':
          description: User datas
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    {
                      id: 2,
                      name: "yuda",
                      email: "yuda@mail.com",
                      phone_number: "08123456",
                      pictures : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/2/foto.jpg",
                    }
                  code: 200
                  message: "Success update data"

        '404':
          $ref: '#/components/responses/404'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'
    
    delete:
      tags:
        - Users
      summary: Delete Users
      description: Feature admin for delete user account
      security:
        - JWTAuth: []
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'
  
####################################
#  PRODUCT
####################################
  /products:
    get:
      tags:
        - Products
      summary: List all Products
      description: Feature for get all products
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all Products"
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  [
                    {
                      "id": 1,
                      "user_id": 2,
                      "product_name": "Kulit Kadal",
                      "description": "warna ungu",
                      "price": 2000000,
                      "pictures" : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product1.jpg",
                      "stock": 10,
                      "sold": 8
                    },
                    {
                      "id": 2,
                      "user_id": 3,
                      "product_name": "Sapu Terbang",
                      "description": "terbuat dari besi pilihan",
                      "pictures" : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product2.jpg",
                      "price": 3000000,
                      "stock": 15,
                      "sold": 3
                    }
                  ]
                code: 200
                message: "Success get all products"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    post:
      tags: 
        - Products
      summary: Add products
      description: Feature for add products
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/responseObject"
            example:
              product_name: "Keripik Kelapa"
              description: "keripik yang terbuat dari kulit kelapa"
              pictures : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product3.jpg"
              price: 2000000
              stock: 10
                
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                data:
                  [
                    {
                      "id": 3,
                      "user_id": 2,
                      "product_name": "Keripik Kelapa",
                      "description": "keripik yang terbuat dari kulit kelapa",
                      "pictures" : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product3.jpg",
                      "price": 2000000,
                      "stock": 10,
                      "sold": 0
                    }
                  ]
                code: 201
                message: "Success add product"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /products/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the products
        schema:
          type: integer
    get:
      tags:
        - Products
      summary: Get a product by id
      description: Feature for get products by id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get a product by ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  {
                    "id": 3,
                    "user_id": 2,
                    "product_name": "Keripik Kelapa",
                    "description": "keripik yang terbuat dari kulit kelapa",
                    "pictures" : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product3.jpg",
                    "price": 2000000,
                    "stock": 10,
                    "sold": 0
                  }
                code: 200
                message: "Success get product by id"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    
    put:
      tags:
        - Products
      summary: Update a product
      description: Feature for update product
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/responseObject"
            example:
              product_name: "Keripik Kelapa"
              description: "keripik yang terbuat dari kulit kelapa"
              pictures: "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product3.jpg"
              price: 2000000
              stock: 10
      responses:
        200:
          description: "get an updated product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  {
                    "id": 3,
                    "user_id": 2,
                    "product_name": "Keripik Kelapa",
                    "description": "keripik yang terbuat dari kulit kelapa",
                    "pictures" : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product3.jpg",
                    "price": 2000000,
                    "stock": 10,
                    "sold": 0
                  }
                code: 200
                message: "Success update product"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"  

    delete:
      tags:
        - Products
      summary: Delete a product
      description: Feature for delete product
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: 
                    type: number
                  message:
                    type: string
              example:
                code: 200
                message: "Success delete product"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500" 
 
  /users/{id}/products:
    parameters:
      - $ref: "#/components/parameters/paramId"
    get:
      tags:
        - Products
      summary: Get products by user id
      description: Feature for get all product by user id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get products by user id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                example:
                data:
                  [
                    {
                      "id": 3,
                      "user_id": 2,
                      "product_name": "Keripik Kelapa",
                      "description": "keripik yang terbuat dari kulit kelapa",
                      "pictures" : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product3.jpg",
                      "price": 2000000,
                      "stock": 10,
                      "sold": 0
                    },
                    {
                      "id": 4,
                      "user_id": 2,
                      "product_name": "Kipas Baja",
                      "description": "kipas tahan segala medan",
                      "pictures" : "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product4.jpg",
                      "price": 2000000,
                      "stock": 20,
                      "sold": 7
                    }
                  ]
                code: 200
                message: "Success get all product by user"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 
  
####################################
#  CARTS
####################################
  /carts:
    post:
      tags: 
        - Cart
      summary: Add to cart
      description: Feature for add product to cart
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
            example:
              product_id: 1
              product_pcs: 1
              customer: "Dilan"
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
              example:
                code: 200
                message: "Success add product to cart"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Cart
      summary: Get all cart
      description: Feature for get all cart by user id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all cart"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": [
                    {
                      "id": 1,
                      "product_id": 1,
                      "product_name": "Kulit Kadal",
                      "product_pcs": 2,
                      "product_price": 2000000,
                      "product_picture": "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product1.jpg",
                      "customer": "Dilan"
                    },
                    {
                      "id": 2,
                      "product_id": 2,
                      "product_name": "Sapu Terbang",
                      "product_pcs": 3,
                      "product_price": 3000000,
                      "product_picture": "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product2.jpg",
                      "customer": "Dilan"
                    },
                    {
                      "id": 3,
                      "product_id": 3,
                      "product_name": "Keripik Kelapa",
                      "product_pcs": 4,
                      "product_price": 200000,
                      "product_picture": "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product3.jpg",
                      "customer": "Dilan"
                    },
                    {
                      "id": 4,
                      "product_id": 4,
                      "product_name": "Kipas Baja",
                      "product_pcs": 2,
                      "product_price": 2000000,
                      "product_picture": "https://res.cloudinary.com/dzfodjxht/image/upload/v1685032143/pointofsales/product/product4.jpg",
                      "customer": "Dilan"
                    },
                  ],
                    code: 200,                
                    message: "success get all cart"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /carts/{id}:
    parameters:
      - $ref: "#/components/parameters/paramId"
    delete:
      tags:
        - Cart
      summary: Delete a cart
      description: Feature for delete cart by id
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
              example:
                code: 200
                message: "succes delete a cart"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500" 

####################################
#  TRANSACTIONS
####################################
  /transactions:
    post:
      tags: 
        - Transaction
      summary: Add transaction
      description: Feature for add transaction product from the cart
      security:
        - JWTAuth: []
      requestBody:
        description: transaction
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
            example:
              cart_id: 1
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
              example:
                data: {
                    "id": 1,
                    "order_id": "POS-032155488899654562",
                    "payment_status": "pending",
                    "payment_link": "https://www.xendit.co",
                    "total_payment": 690000,
                    "customer": "Dilan"
                    }
                code: 200
                message: "success add product to cart"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Transaction
      summary: Get all transaction
      description: Feature for get all transaction by user id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all transaction"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    data: [
                    {
                      "id": 1,
                      "order_id": "POS-032155488899654562",
                      "payment_status": "pending",
                      "payment_link": "https://www.xendit.co",
                      "total_payment": 690000,
                      "customer": "Dilan"
                    },
                    {
                      "id": 2,
                      "order_id": "POS-032155488899654562",
                      "payment_status": "success",
                      "payment_link": "https://www.xendit.co",
                      "total_payment": 250000,
                      "customer": "Dilan"
                    },
                    {
                      "id": 3,
                      "order_id": "POS-032155488899654562",
                      "payment_status": "failure",
                      "payment_link": "https://www.xendit.co",
                      "total_payment": 300000,
                      "customer": "Dilan"
                    },
                    {
                      "id": 4,
                      "order_id": "POS-032155488899654562",
                      "payment_status": "success",
                      "payment_link": "https://www.xendit.co",
                      "total_payment": 200000,
                      "customer": "Dilan"
                    },
                  ],  
                    code: 200,              
                    message: "success get all transaction"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    
####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        code:
          type: number
        message:
          type: string

    User:
      type: object
      required:
        - name
        - email
        - phone_number
        - pictures
        - password
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the user
        name:
          type: string
          description: name
        email:
          type: string
          description: email
        phone_number:
          type: integer
          description: phone_number
        pictures:
          type: string
          description: pictures
        password:
          type: string
          description: password

    Product:
      type: object
      required:
        - user_id
        - product_name
        - description
        - pictures
        - price
        - stock
        - sold
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the discussions
        user_id:
          type: integer
          format: int64
          description: the ID of the user
        product_name: 
          type: string
          description: the content of the product_name
        description: 
          type: string
          description: the content of the description
        pictures: 
          type: string
          description: pictures of the products
        price: 
          type: integer
          description: price
        stock: 
          type: integer
          description: stock
        sold: 
          type: integer
          description: sold

    Cart:
      type: object
      required:
        - customer
        - product_id
        - product_pcs
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the cart
        product_id:
          type: integer
          format: int64
          description: the ID of the products
        product_name: 
          type: string
          description: name of product
        product_pcs:
          type: integer
          format: int64
          description: number of packs purchased
        product_price: 
          type: integer
          format: int64
          description: price of product
        product_picture: 
          type: string
          description: picture of product
        user_id:
          type: integer
          format: int64
          description: the ID of the user
        customer:
          type: string
          description: customer name
          
    Transaction:
      type: object
      required:
        - cart_id
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the transaction
        order_id:
          type: integer
          format: int64
          description: the ID of the order
        payment_status: 
          type: string
          description: status of payment
        payment_link: 
          type: string
          description: link of payment
        total_payment:
          type: integer
          format: int64
          description: total of payment
        
  parameters:
    paramId:
      name: id
      in: path
      required: true
      schema: 
        type: integer
        example: 1

    productId:
      name: id_product
      in: path
      required: true
      schema: 
        type: integer
        example: 1


  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
          example:
            code: 400
            message: "error in your request"

    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
          example:
            code: 401
            message: "request does not contain a valid token"

    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
          example:
            code: 404
            message: "data not found"

    '204':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
          example:
            code: 204
            message: "Delete data success"
           

    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
          example:
            code: 500
            message: "internal server error"